const bcrypt = require("bcryptjs");
const nodemailer = require("nodemailer");
const sendgridTransport = require("nodemailer-sendgrid-transport");
const { validationResult } = require("express-validator");

const User = require("../models/user");

const transporter = nodemailer.createTransport(
    sendgridTransport({
        auth: {
            api_key:
                "Nhập API key ở đây!",
        },
    })
);

const Session = require("../models/sessions");

exports.postLogin = (req, res, next) => {
    const email = req.body.email;
    const password = req.body.password;
    console.log("email:", email);
    console.log("password:", password);

    const errors = validationResult(req);

    console.log("errors:", errors);

    if (!errors.isEmpty()) {
        return res.status(422).json({
            message: errors.array()[0].msg,
        });
    }

    User.findOne({ email: email })
        .then((user) => {
            if (!user) {
                console.log("User don't be existed!");
                return res.status(404).json({
                    message: "User don't be existed!",
                });
            }
            bcrypt
                .compare(password, user.password)
                .then((doMatch) => {
                    if (doMatch) {
                        req.session.isLoggin = true;
                        req.session.user = user;
                        console.log("Login successfully!");
                        return req.session.save((err) => {
                            console.log(err);
                            res.status(200).json({
                                message: "Login successfully!",
                            });
                        });
                    }
                    console.log("Wrong password!");
                    res.status(403).json({
                        message: "Wrong password!",
                    });
                })
                .catch((err) => {
                    console.log(err);
                });
        })
        .catch((err) => {
            // console.log(err);
            const error = new Error(err);
            error.httpStatusCode = 500;
            return next(error);
        });
};

exports.postSignup = (req, res, next) => {
    const email = req.body.email;
    const password = req.body.password;
    const confirmPassword = req.body.confirmPassword;

    const errors = validationResult(req);

    console.log("email:", email);
    console.log("password:", password);
    console.log("confirmPassword:", confirmPassword);

    if (!errors.isEmpty()) {
        console.log(errors.array());
        return res.status(422).json({
            message: errors.array()[0].msg,
        });
    }

    User.findOne({ email: email })
        .then((user) => {
            return bcrypt
                .hash(password, 12)
                .then((hashPassword) => {
                    const user = new User({
                        email: email,
                        password: hashPassword,
                        cart: { items: [] },
                    });
                    return user.save();
                })
                .then((result) => {
                    console.log("User has been created!");
                    res.status(201).json({
                        message: "User has been created!",
                    });
                    return transporter.sendMail({
                        to: email,
                        from: "xitrumvndn@gmail.com",
                        subject: "Signup succeeded!",
                        html: "<h1>You successfully signed up!</h1>",
                    });
                })
                .catch((err) => {
                    console.log(err);
                });
        })
        .catch((err) => {
            // console.log(err);
            const error = new Error();
            error.httpStatusCode = 500;
            return next(error);
        });
};

exports.postLogout = (req, res, next) => {
    req.session.destroy((err) => {
        console.log(err);
        Session.deleteMany()
            .then((result) => {
                res.status(201).json({
                    message: "Logout successfully!",
                });
            })
            .catch((err) => {
                // console.log(err);
                const error = new Error(err);
                error.httpStatusCode = 500;
                return next(error);
            });
    });
};
